<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Vocab Space Battle – 2 Player</title>
  <style>
    :root{--bg:#0b1020;--panel:#111831;--accent:#68e1fd;--good:#61d095;--bad:#ff6b6b;--text:#e7ecff}
    *{box-sizing:border-box}
    body{margin:0;background:radial-gradient(1000px 500px at 50% 0%, #0f1a3a, #0a0f20 60%);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;display:flex;flex-direction:column;min-height:100vh}
    header{padding:12px 16px;border-bottom:1px solid #233;display:flex;gap:12px;align-items:center;justify-content:space-between;background:rgba(15,25,55,.6);backdrop-filter:blur(6px)}
    .brand{display:flex;gap:10px;align-items:center}
    .brand .logo{width:28px;height:28px;border-radius:8px;background:conic-gradient(from 180deg, var(--accent), #7cf7c2, #5b9dff, var(--accent));box-shadow:0 0 18px rgba(104,225,253,.4)}
    .brand h1{margin:0;font-size:18px;letter-spacing:.4px}
    main{display:grid;grid-template-columns:320px 1fr 320px;gap:14px;padding:14px;flex:1}
    @media (max-width: 1100px){main{grid-template-columns:1fr;grid-template-rows:auto auto auto}}
    .panel{background:linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.01));border:1px solid #1d2749;border-radius:16px;box-shadow:0 8px 30px rgba(0,0,0,.3);padding:12px}
    .panel h2{font-size:16px;margin:0 0 8px 0;opacity:.9}
    #gameWrap{display:flex;flex-direction:column;gap:10px}
    #canvasWrap{position:relative}
    #gameCanvas{width:100%;height:480px;background:radial-gradient(1200px 500px at 50% -80%, rgba(104,225,253,.2), transparent 30%),
      radial-gradient(800px 400px at 10% 30%, rgba(123,180,255,.15), transparent 40%),
      radial-gradient(900px 400px at 90% 30%, rgba(153,255,210,.12), transparent 40%),
      #070b17;border:1px solid #1a2447;border-radius:16px;display:block}
    .hud{display:flex;justify-content:space-between;gap:8px;flex-wrap:wrap}
    .hearts{display:flex;gap:4px;align-items:center}
    .heart{width:18px;height:18px;background:radial-gradient(circle at 30% 30%, #ff9aa8, #ff6b6b 60%);clip-path:path('M12 21s-7.5-4.438-10-8.5C-0.5 8 1.5 4.5 5 4.5c2 0 3.5 1 4.5 2 1-1 2.5-2 4.5-2 3.5 0 5.5 3.5 3 8  -2.5 4.062-10 8.5-10 8.5z')}
    .pBadge{padding:4px 8px;border-radius:999px;border:1px solid #244;display:inline-flex;gap:6px;align-items:center}
    .p1{--p:#7cf7c2}.p2{--p:#68e1fd}
    .pBadge .dot{width:8px;height:8px;border-radius:50%;background:var(--p);box-shadow:0 0 10px var(--p)}
    .controls{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:8px}
    .controls .pad{display:grid;grid-template-columns:repeat(3,48px);gap:6px;justify-content:flex-start}
    .controls button{background:#0e1733;border:1px solid #20305f;border-radius:12px;padding:8px 10px;color:var(--text);cursor:pointer;transition:.15s;min-width:48px}
    .controls button:hover{transform:translateY(-1px);box-shadow:0 6px 14px rgba(0,0,0,.25)}
    .controls .wide{grid-column:span 3}
    .status{font-size:14px;opacity:.9}
    .question{display:flex;flex-direction:column;gap:8px;margin-top:8px}
    .choices{display:grid;grid-template-columns:1fr;gap:6px}
    .choices button{justify-self:stretch}
    .pill{display:inline-flex;gap:6px;align-items:center;border:1px solid #2a3a6b;padding:4px 8px;border-radius:999px;background:#0a1330}
    .kbd{padding:2px 6px;border:1px solid #3b4f83;border-radius:6px;background:#0c1a3d;font-family:ui-monospace,Menlo,monospace;font-size:12px}
    .muted{opacity:.8}
    .footer{padding:8px 16px;text-align:center;font-size:12px;opacity:.8}
    .link{color:var(--accent)}
    .banner{padding:10px;border:1px dashed #2a3; border-radius:12px; background:linear-gradient(180deg, rgba(46,139,87,.12), rgba(46,139,87,.05)); margin-bottom:8px}
  </style>
</head>
<body>
  <header>
    <div class="brand"><div class="logo"></div><h1>Vocab Space Battle — 2P</h1></div>
    <div class="pill">Open-source • GitHub Pages ready</div>
  </header>

  <main>
    <!-- Left panel: Player 1 -->
    <section class="panel" id="p1Panel">
      <h2>Player 1 <span class="pBadge p1"><span class="dot"></span> WASD / Buttons</span></h2>
      <div class="hud">
        <div class="hearts" id="p1Hearts"></div>
        <div class="status" id="p1Status">Waiting…</div>
      </div>
      <div class="controls">
        <div class="pad">
          <button data-move="P1_LEFT">⬅</button>
          <button class="wide" data-move="P1_STAY">Stay</button>
          <button data-move="P1_RIGHT">➡</button>
        </div>
      </div>
      <div class="question" id="q1Box">
        <div class="muted">Answer to shoot!</div>
        <div id="q1Text">—</div>
        <div class="choices" id="q1Choices"></div>
      </div>
    </section>

    <!-- Game Canvas center -->
    <section class="panel" id="gameWrap">
      <div class="banner"><strong>How to win:</strong> move under the alien and answer correctly to fire. Wrong answers cost a heart. If the alien reaches you or both players lose all hearts → game over.</div>
      <div id="canvasWrap">
        <canvas id="gameCanvas" width="900" height="480" aria-label="Game field"></canvas>
      </div>
      <div class="hud">
        <div id="turnLabel">Turn: 1</div>
        <div class="pill">Grid: <span id="gridInfo">12 × 8</span></div>
        <div class="pill">Alien row drops on edge hit</div>
        <div class="pill">Difficulty: <span id="diff">Normal</span></div>
      </div>
      <div class="status" id="globalStatus">Press any move button or use keys (<span class="kbd">A/D</span> for P1, <span class="kbd">J/L</span> for P2)</div>
    </section>

    <!-- Right panel: Player 2 -->
    <section class="panel" id="p2Panel">
      <h2>Player 2 <span class="pBadge p2"><span class="dot"></span> J/L / Buttons</span></h2>
      <div class="hud">
        <div class="hearts" id="p2Hearts"></div>
        <div class="status" id="p2Status">Waiting…</div>
      </div>
      <div class="controls">
        <div class="pad">
          <button data-move="P2_LEFT">⬅</button>
          <button class="wide" data-move="P2_STAY">Stay</button>
          <button data-move="P2_RIGHT">➡</button>
        </div>
      </div>
      <div class="question" id="q2Box">
        <div class="muted">Answer to shoot!</div>
        <div id="q2Text">—</div>
        <div class="choices" id="q2Choices"></div>
      </div>
    </section>
  </main>

  <div class="footer">Made for vocabulary practice. Edit the question bank in the source (<code>QUESTIONS</code> array) or add your own list via JSON in devtools.</div>

  <script>
  /**
   * Vocab Space Battle — 2 Player
   * Pure HTML/JS/CSS single file. Deploy by committing index.html to a GitHub repo and enabling GitHub Pages.
   * Controls: P1: A/D (←/→) or buttons. P2: J/L or buttons. Answer choices with mouse/touch.
   * Turn order: Alien moves → P1 answers (fires if correct) → P2 answers (fires if correct) → next turn.
   * Punishment: Wrong answer = lose 1 heart. Lose when alien reaches bottom row or both players have 0 hearts.
   */

  // ======== CONFIG ========
  const COLS = 12; // grid width
  const ROWS = 8;  // grid height (alien starts at row 0; players at ROWS-1)
  const CELL = 60; // canvas pixels per cell (derived at render)
  const MAX_HEARTS = 3;
  const DROP_ON_EDGE = true; // alien drops a row when it hits wall
  const TURN_MS = 450; // animation time for alien step

  // Question bank — MCQs. Feel free to replace with your own list.
  // Each item: {prompt, options:[], answerIndex}
  const QUESTIONS = [
    {prompt: "arduous", options:["very difficult", "very easy", "colorful"], answerIndex:0},
    {prompt: "meticulous", options:["careful and detailed", "quick and careless", "noisy"], answerIndex:0},
    {prompt: "benevolent", options:["kind and charitable", "angry", "mysterious"], answerIndex:0},
    {prompt: "ubiquitous", options:["found everywhere", "rare", "transparent"], answerIndex:0},
    {prompt: "alleviate", options:["make less severe", "make worse", "to decorate"], answerIndex:0},
    {prompt: "pragmatic", options:["practical", "theoretical only", "expensive"], answerIndex:0},
    {prompt: "succinct", options:["brief and clear", "long and boring", "confusing"], answerIndex:0},
    {prompt: "ambivalent", options:["having mixed feelings", "certain", "hostile"], answerIndex:0},
    {prompt: "adversity", options:["difficulty; hardship", "holiday", "growth"], answerIndex:0},
    {prompt: "eloquent", options:["persuasive and fluent", "silent", "awkward"], answerIndex:0},
    {prompt: "impeccable", options:["without fault", "dirty", "average"], answerIndex:0},
    {prompt: "concur", options:["agree", "disagree", "argue"], answerIndex:0},
    {prompt: "alacrity", options:["eager readiness", "sadness", "anger"], answerIndex:0},
    {prompt: "tenacious", options:["persistent", "fragile", "lazy"], answerIndex:0},
    {prompt: "novice", options:["beginner", "expert", "teacher"], answerIndex:0},
    {prompt: "candor", options:["honesty", "jealousy", "fear"], answerIndex:0},
    {prompt: "feasible", options:["possible", "impossible", "boring"], answerIndex:0},
    {prompt: "obsolete", options:["out of date", "brand new", "popular"], answerIndex:0},
    {prompt: "mitigate", options:["reduce the impact", "ignore", "celebrate"], answerIndex:0},
    {prompt: "fortify", options:["strengthen", "weaken", "simplify"], answerIndex:0}
  ];

  // ======== STATE ========
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  let turn = 1;
  let alien = {x: Math.floor(COLS/2), y: 0, dir: 1};
  let players = [
    {id:1, x: Math.floor(COLS/2)-2, y: ROWS-1, hearts: MAX_HEARTS, readyMove: 0, awaiting:false},
    {id:2, x: Math.floor(COLS/2)+2, y: ROWS-1, hearts: MAX_HEARTS, readyMove: 0, awaiting:false}
  ];
  let gameOver = false;
  let answering = 0; // 1 for P1 stage, 2 for P2 stage, 0 for none
  let qIndex = 0; // simple rotation through QUESTIONS

  // ======== UI Helpers ========
  function renderHearts(el, n){
    el.innerHTML = ''; for(let i=0;i<n;i++){ const d=document.createElement('div'); d.className='heart'; el.appendChild(d);} }
  const p1Hearts = document.getElementById('p1Hearts');
  const p2Hearts = document.getElementById('p2Hearts');
  const p1Status = document.getElementById('p1Status');
  const p2Status = document.getElementById('p2Status');
  const globalStatus = document.getElementById('globalStatus');
  const turnLabel = document.getElementById('turnLabel');
  const gridInfo = document.getElementById('gridInfo');
  gridInfo.textContent = `${COLS} × ${ROWS}`;

  function choiceButtons(containerId, playerIdx){
    const box = document.getElementById(containerId);
    box.innerHTML = '';
    const q = QUESTIONS[qIndex % QUESTIONS.length];
    const qTextId = containerId.replace('Choices','Text');
    const qText = document.getElementById(qTextId);
    qText.textContent = `"${q.prompt}" means…`;
    q.options.forEach((opt, i)=>{
      const btn = document.createElement('button');
      btn.textContent = opt; btn.addEventListener('click', ()=> handleAnswer(playerIdx, i===q.answerIndex));
      box.appendChild(btn);
    });
  }

  function nextQuestion(){ qIndex = (qIndex+1) % QUESTIONS.length; }

  // ======== Rendering ========
  function draw(){
    const w = canvas.width, h = canvas.height;
    ctx.clearRect(0,0,w,h);

    // grid lines subtle
    ctx.globalAlpha = 0.08; ctx.strokeStyle = '#7fd9ff'; ctx.lineWidth = 1;
    for(let c=0;c<=COLS;c++){ const x=c*(w/COLS); ctx.beginPath(); ctx.moveTo(x,0); ctx.lineTo(x,h); ctx.stroke(); }
    for(let r=0;r<=ROWS;r++){ const y=r*(h/ROWS); ctx.beginPath(); ctx.moveTo(0,y); ctx.lineTo(w,y); ctx.stroke(); }
    ctx.globalAlpha = 1;

    // alien
    const ax = (alien.x+0.5)*(w/COLS), ay = (alien.y+0.5)*(h/ROWS);
    drawAlien(ax, ay, Math.min(w,h)/30);

    // players
    players.forEach((p, idx)=>{
      const px = (p.x+0.5)*(w/COLS), py=(p.y+0.5)*(h/ROWS);
      drawShip(px, py, Math.min(w,h)/28, idx===0?'#7cf7c2':'#68e1fd');
    });
  }

  function drawAlien(x,y,s){
    ctx.save();
    ctx.translate(x,y);
    // body
    ctx.fillStyle = '#ff9aa8';
    roundRect(ctx, -s, -s*0.7, s*2, s*1.4, 8); ctx.fill();
    // eyes
    ctx.fillStyle = '#111'; ctx.beginPath(); ctx.arc(-s*0.4, -s*0.1, s*0.18, 0, Math.PI*2); ctx.arc(s*0.4, -s*0.1, s*0.18, 0, Math.PI*2); ctx.fill();
    // feet
    ctx.fillStyle = '#ffa6b1'; ctx.fillRect(-s*0.9, s*0.6, s*0.5, s*0.2); ctx.fillRect(s*0.4, s*0.6, s*0.5, s*0.2);
    ctx.restore();
  }

  function drawShip(x,y,s,color){
    ctx.save(); ctx.translate(x,y);
    // glow
    const g = ctx.createRadialGradient(0,0,2,0,0,s*1.8); g.addColorStop(0, color); g.addColorStop(1, 'transparent');
    ctx.fillStyle = g; ctx.beginPath(); ctx.arc(0,0,s*1.4,0,Math.PI*2); ctx.fill();
    // body
    ctx.fillStyle = color; roundRect(ctx, -s*0.7, -s*0.4, s*1.4, s*0.8, 8); ctx.fill();
    ctx.fillStyle = '#0b1020'; roundRect(ctx, -s*0.35, -s*0.22, s*0.7, s*0.44, 6); ctx.fill();
    ctx.restore();
  }

  function roundRect(ctx, x, y, w, h, r){
    ctx.beginPath(); ctx.moveTo(x+r, y); ctx.arcTo(x+w, y, x+w, y+h, r); ctx.arcTo(x+w, y+h, x, y+h, r); ctx.arcTo(x, y+h, x, y, r); ctx.arcTo(x, y, x+w, y, r); ctx.closePath();
  }

  function shoot(fromPlayer){
    // Animate a laser and determine hit if same column at fire time
    const p = players[fromPlayer-1];
    const w = canvas.width, h = canvas.height; const x = (p.x+0.5)*(w/COLS);
    const pathTop = (alien.y+0.5)*(h/ROWS);
    const startY = (p.y+0.5)*(h/ROWS);

    const hit = (p.x === alien.x);

    // visual laser
    let y = startY; const step = ()=>{
      ctx.save();
      // redraw background
      draw();
      ctx.globalAlpha=0.9; ctx.strokeStyle = fromPlayer===1?'#7cf7c2':'#68e1fd'; ctx.lineWidth=3;
      ctx.beginPath(); ctx.moveTo(x, y); ctx.lineTo(x, Math.max(pathTop-18, 0)); ctx.stroke();
      ctx.restore();
      y -= 40; if(y > 0){ requestAnimationFrame(step);} else { draw(); }
    };
    step();

    return hit;
  }

  // ======== Game Flow ========
  function updateHearts(){
    renderHearts(p1Hearts, players[0].hearts); renderHearts(p2Hearts, players[1].hearts);
  }

  function setStatuses(){
    p1Status.textContent = answering===1? 'Your turn: answer to shoot' : 'Waiting…';
    p2Status.textContent = answering===2? 'Your turn: answer to shoot' : 'Waiting…';
  }

  function resetQuestionsUI(){
    choiceButtons('q1Choices', 1); choiceButtons('q2Choices', 2);
  }

  function beginTurn(){
    if(gameOver) return;
    globalStatus.textContent = 'Alien is moving…';
    // Move alien horizontally one step; if hits wall, reverse and drop
    const nextX = alien.x + alien.dir;
    const hitWall = (nextX<0 || nextX>=COLS);
    if(hitWall){ alien.dir *= -1; if(DROP_ON_EDGE) alien.y = Math.min(alien.y+1, ROWS-1); }
    else { alien.x = nextX; }

    // Animate slight delay
    setTimeout(()=>{
      draw();
      // Check lose by reach bottom
      if(alien.y >= ROWS-1){ endGame(false, 'The alien reached your base!'); return; }

      // P1 answers first
      answering = 1; setStatuses(); resetQuestionsUI();
      globalStatus.textContent = 'Player 1: answer to fire';
    }, TURN_MS);
  }

  function handleAnswer(playerIdx, correct){
    if(gameOver) return;
    if(answering !== playerIdx) return; // not your turn

    if(correct){
      globalStatus.textContent = `Player ${playerIdx} correct! Firing…`;
      const hit = shoot(playerIdx);
      // Small delay to let the laser animate
      setTimeout(()=>{
        if(hit){ endGame(true, `Direct hit by Player ${playerIdx}!`); }
        else{
          // proceed to next player or next turn
          nextQuestion();
          if(playerIdx===1){ answering = 2; setStatuses(); globalStatus.textContent = 'Player 2: answer to fire'; }
          else { answering = 0; setStatuses(); turn++; turnLabel.textContent = `Turn: ${turn}`; beginTurn(); }
        }
      }, 300);
    } else {
      // punishment: lose heart
      const p = players[playerIdx-1]; p.hearts = Math.max(0, p.hearts-1); updateHearts();
      if(players[0].hearts<=0 && players[1].hearts<=0){ endGame(false, 'Both players ran out of hearts'); return; }
      globalStatus.textContent = `Player ${playerIdx} missed (−1 ❤).`;
      nextQuestion();
      // move to next stage
      if(playerIdx===1){ answering = 2; setStatuses(); globalStatus.textContent = 'Player 2: answer to fire'; }
      else { answering = 0; setStatuses(); turn++; turnLabel.textContent = `Turn: ${turn}`; beginTurn(); }
    }
  }

  function endGame(win, msg){
    gameOver = true; answering = 0; setStatuses();
    globalStatus.textContent = (win? '🏆 Victory! ' : '💀 Defeat. ') + msg + ' — Click to restart.';
    canvas.style.filter = win? 'drop-shadow(0 0 20px #7cf7c2)' : 'grayscale(0.6)';
  }

  function restart(){
    turn = 1; alien = {x: Math.floor(COLS/2), y: 0, dir: 1};
    players = [
      {id:1, x: Math.floor(COLS/2)-2, y: ROWS-1, hearts: MAX_HEARTS, readyMove: 0, awaiting:false},
      {id:2, x: Math.floor(COLS/2)+2, y: ROWS-1, hearts: MAX_HEARTS, readyMove: 0, awaiting:false}
    ];
    gameOver = false; answering = 0; qIndex = 0; updateHearts(); setStatuses(); turnLabel.textContent='Turn: 1'; canvas.style.filter='none'; draw(); beginTurn();
  }

  // ======== Movement (before answering) ========
  function movePlayer(idx, dir){
    if(gameOver) return;
    const p = players[idx];
    const newX = p.x + dir;
    if(newX>=0 && newX<COLS){ p.x = newX; draw(); }
  }

  // buttons
  document.querySelectorAll('[data-move]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const v = btn.getAttribute('data-move');
      if(v==='P1_LEFT') movePlayer(0,-1);
      if(v==='P1_RIGHT') movePlayer(0,1);
      if(v==='P2_LEFT') movePlayer(1,-1);
      if(v==='P2_RIGHT') movePlayer(1,1);
      if(v.endsWith('STAY')) { /* no-op */ }
    });
  });

  // keys
  window.addEventListener('keydown', (e)=>{
    if(gameOver){ restart(); return; }
    if(e.key==='a' || e.key==='A') movePlayer(0,-1);
    if(e.key==='d' || e.key==='D') movePlayer(0,1);
    if(e.key==='j' || e.key==='J') movePlayer(1,-1);
    if(e.key==='l' || e.key==='L') movePlayer(1,1);
  });

  // clicking canvas restarts after game ends
  canvas.addEventListener('click', ()=>{ if(gameOver) restart(); });

  // ======== Init ========
  function init(){
    updateHearts(); setStatuses(); resetQuestionsUI(); draw(); beginTurn();
  }
  init();

  // ======== Extensibility API (optional for your project) ========
  // Expose a simple API for swapping question banks from the browser console.
  // Example: window.setQuestions([{prompt:'cat', options:['a','b','c'], answerIndex:0}, ...])
  window.setQuestions = function(list){
    if(!Array.isArray(list) || list.length===0) return alert('Provide a non-empty array of {prompt, options, answerIndex}');
    for(const item of list){
      if(!item || typeof item.prompt!== 'string' || !Array.isArray(item.options) || typeof item.answerIndex !== 'number'){
        alert('Invalid question format.'); return;
      }
    }
    while(QUESTIONS.length) QUESTIONS.pop();
    list.forEach(q=>QUESTIONS.push(q));
    qIndex = 0; resetQuestionsUI();
    console.log('Question bank updated. Total:', QUESTIONS.length);
  }

  </script>
</body>
</html>
